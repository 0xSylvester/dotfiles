#+TITLE: MY DOOM CONFIG
#+AUTHOR: sylvester

* Table of contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#my-configel][My config.el]]
  - [[#user-configuration][User configuration]]
  - [[#ui][UI]]
  - [[#terminal][Terminal]]
  - [[#org][Org]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-roam][Org Roam]]
  - [[#git][Git]]
  - [[#dired][Dired]]
  - [[#complition][Complition]]
  - [[#ibuffer][Ibuffer]]
  - [[#awqat][awqat]]
  - [[#olivetti][Olivetti]]
  - [[#emms][Emms]]
  - [[#typst][Typst]]
  - [[#openwith][OpenWith]]
- [[#my-packageel][My package.el]]
- [[#my-initel][My init.el]]
#+END_QUOTE

* My config.el
Here where the main config will stored

=NOTE=: after you edit this file make sure you run =doom sync= or =SPC h r r=
** User configuration
#+begin_src emacs-lisp :tangle config.el

;; user-name + email
(setq user-full-name "sylvester"
      user-mail-address "mhxxx2005@gmail.com")

#+end_src

** UI
*** Fonts
This is my default font for my entire system

#+begin_src emacs-lisp :tangle config.el

(setq doom-font (font-spec :family "Inconsolata" :size 18))
(setq doom-symbol-font (font-spec :family "Inconsolata Nerd Font Propo"))
(setq doom-emoji-font (font-spec :family "Inconsolata Nerd Font Propo"))

#+end_src

*** Theme
You can the set theme manually with buildin function =load-theme= or use the =doom-theme= var

#+begin_src emacs-lisp :tangle config.el

(setq doom-theme 'doom-gruvbox)
(setq custom-safe-themes t)

#+end_src

#+RESULTS:
: t

*** Modeline
#+begin_src emacs-lisp :tangle config.el
(setq doom-modeline-height 30)

;; Set icons
(after! nerd-icons
  (setq doom-modeline-major-mode-icon t))

(map! :leader
      :prefix ("t")
      :desc "Toggle Modeline" "M" #'hide-mode-line-mode)

#+end_src

*** Line numbers
Disabling line numbers by default for all buffer and then enable it for specific buffer

#+begin_src emacs-lisp :tangle config.el

(setq display-line-numbers-type 'relative)
;;
;;(defun config/line-number-setup ()
;;  (setq display-line-numbers-type t)
;;  (display-line-numbers-mode))

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook
                typst-ts-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;;(add-hook 'prog-mode-hook #'config/line-number-setup)

#+end_src

*** Delimiters
Colorizing parenthese for better looking

#+begin_src emacs-lisp :tangle config.el

;; Disable the highlight for current line
(add-hook 'text-mode-hook (lambda () (hl-line-mode -1)))

(use-package! rainbow-delimiters
  :hook (prog-mode-hook . rainbow-delimiters-mode))
(show-paren-mode t)

#+end_src

*** Dim
for diming i am using [[https://github.com/larstvei/Focus][Focus]] simple package works with any theme

To pin dim run =focus-pin= and for unpin =focus-unpin=

#+begin_src emacs-lisp :tangle config.el

(use-package! focus
  :config
  (map! :leader
        :prefix ("t")
        :desc "Toggle Dim" "D" #'focus-mode))

#+end_src
** Terminal

#+begin_src emacs-lisp :tangle config.el
(add-hook 'term-mode-hook 'evil-emacs-state)
#+end_src

** Org
*** Basic
#+begin_src emacs-lisp :tangle config.el

;; set the default dir for org files
(setq org-directory "~/Documents/org/")
(setq org-attach-dir "~/Documents/org/.attach")
(setq org-attach-id-dir "~/Documents/org/.attach")
(setq org-id-locations-file "~/Documents/org/.orgids")
(setq org-archive-location "~/Documents/org/archive/%s_archive::") ;; org archive dir

;; Make the content unfolded when open the file
(setq org-startup-folded 'content)

(custom-set-faces!
  `(outline-1 :height 1.3 :foreground ,(nth 1 (nth 14 doom-themes--colors)))
  `(outline-2 :height 1.25 :foreground ,(nth 1 (nth 15 doom-themes--colors)))
  `(outline-3 :height 1.2 :foreground ,(nth 1 (nth 19 doom-themes--colors)))
  `(outline-4 :height 1.1 :foreground ,(nth 1 (nth 23 doom-themes--colors)))
  `(outline-5 :height 1.1 :foreground ,(nth 1 (nth 24 doom-themes--colors)))
  `(outline-6 :height 1.1 :foreground ,(nth 1 (nth 16 doom-themes--colors)))
  `(outline-7 :height 1.05 :foreground ,(nth 1 (nth 18 doom-themes--colors)))
  `(outline-8 :height 1.05 :foreground ,(nth 1 (nth 11 doom-themes--colors))))

(defun config/org-mode-init ()
  (setq olivetti-body-width 120)
  (olivetti-mode))

;;(use-package! visual-fill-column
;;  :hook (org-mode . config/org-mode-visual-fill))
(add-hook 'org-mode-hook #'config/org-mode-init)

(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

#+end_src

*** Org Modren
its package to make org mode look pretty
#+begin_src emacs-lisp :tangle config.el

(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq
   ;; Edit settings
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t
   ;; Appearance
   org-modern-radio-target    '("❰" t "❱")
   org-modern-internal-target '("↪ " t "")
   org-modern-table nil
   org-modern-todo nil
   org-modern-tag nil
   org-modern-timestamp nil
   org-modern-statistics nil
   org-modern-progress nil
   org-modern-priority nil
   org-modern-horizontal-rule "──────────"
   org-modern-hide-stars "·"
   org-modern-star ["⁖"]
   org-modern-keyword "‣"
   org-modern-list '((43 . "•")
                     (45 . "–")
                     (42 . "↪"))
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-agenda-tags-column 0)
  (global-org-modern-mode))
#+end_src


*** Org Capture
#+begin_src emacs-lisp :tangle config.el
#+end_src

*** Todo
#+begin_src emacs-lisp :tangle config.el
(use-package! svg-tag-mode
  :after org
  :config
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
	(svg-image (svg-lib-concat
				(svg-lib-progress-bar (/ (string-to-number value) 100.0)
			      nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
				(svg-lib-tag (concat value "%")
				  nil :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
	(let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
	  (svg-image (svg-lib-concat
				  (svg-lib-progress-bar (/ count total) nil
					:margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
				  (svg-lib-tag value nil
					:stroke 0 :margin 0)) :ascent 'center)))
  (setq svg-tag-tags
      `(;; Org tags
        (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
        (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))

        ;; Task priority
        ("\\[#[A-Z]\\]" . ( (lambda (tag)
                              (svg-tag-make tag :face 'org-priority
                                            :beg 2 :end -1 :margin 0))))

        ;; Progress
        ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
          (svg-progress-percent (substring tag 1 -2)))))
        ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
          (svg-progress-count (substring tag 1 -1)))))

        ;; TODO / DONE
        ;; ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo
		;; 									           :inverse t :margin 0))))
        ;; ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


        ;; Citation of the form [cite:@Knuth:1984]
        ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                          (svg-tag-make tag
                                                        :inverse t
                                                        :beg 7 :end -1
                                                        :crop-right t))))
        ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                (svg-tag-make tag
                                                              :end -1
                                                              :crop-left t))))


        ;; Active date (with or without day name, with or without time)
        (,(format "\\(<%s>\\)" date-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :end -1 :margin 0))))
        (,(format "\\(<%s \\)%s>" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
        (,(format "<%s \\(%s>\\)" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

        ;; Inactive date  (with or without day name, with or without time)
         (,(format "\\(\\[%s\\]\\)" date-re) .
          ((lambda (tag)
             (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
         (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
          ((lambda (tag)
             (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
         (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
          ((lambda (tag)
             (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date)))))))


(add-hook! 'org-mode-hook 'svg-tag-mode)

#+end_src

** Org Agenda
#+begin_src emacs-lisp :tangle config.el

;;(defun config/org-agenda-setup ()
;;  "Hook to be run when org-agenda is opened"
;;  (olivetti-mode))
;;
;;(custom-set-faces!
;;  '(org-agenda-date :inherit outline-1 :height 1.15)
;;  '(org-agenda-date-today :inherit outline-2 :height 1.15)
;;  '(org-agenda-date-weekend :inherit outline-1 :height 1.15)
;;  '(org-agenda-date-weekend-today :inherit outline-2 :height 1.15)
;;  '(org-super-agenda-header :inherit custom-button :weight bold :height 1.05)
;;  `(link :foreground unspecified :underline nil :background ,(nth 1 (nth 7 doom-themes--colors)))
;;  '(org-link :foreground unspecified))
;;
;;
(use-package! all-the-icons)
(use-package! org-super-agenda
  :config (org-super-agenda-mode t))
;;
;;(after! org
;;  (setq org-agenda-files '("~/documents/org/agenda.org")
;;        org-agenda-span 1
;;        org-agenda-start-day "+0d")
;;  (setq org-agenda-time-grid '((daily) (600 1200 1800) "---" "-----"))
;;
;;  (setq org-agenda-current-time-string "")
;;  (setq org-agenda-time-grid '((daily) () "" ""))
;;  (setq org-agenda-category-icon-alist
;;      `(("home" ,(list (all-the-icons-faicon "home" :v-adjust 0.005)) nil nil :ascent center)))
;;
;;  (setq org-agenda-prefix-format '(
;;        (agenda . "  %?-2i %t ")
;;        (todo . " %i %-12:c")
;;        (tags . " %i %-12:c")
;;        (search . " %i %-12:c")))
;;
;;  (setq org-super-agenda-groups
;;        '((:name "Home"
;;           :tag "home"))))
;;
;;(add-hook! 'org-agenda-mode-hook #'config/org-agenda-setup)
;;;------ Org agenda configuration ------;;;
;; Set span for agenda to be just daily
(setq org-agenda-span 1
      org-agenda-start-day "+0d"
      org-agenda-skip-timestamp-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-skip-timestamp-if-deadline-is-shown t
      org-log-into-drawer t)

;; Custom styles for dates in agenda
(custom-set-faces!
  '(org-agenda-date :inherit outline-1 :height 1.15)
  '(org-agenda-date-today :inherit outline-2 :height 1.15)
  '(org-agenda-date-weekend :inherit outline-1 :height 1.15)
  '(org-agenda-date-weekend-today :inherit outline-2 :height 1.15)
  '(org-super-agenda-header :inherit custom-button :weight bold :height 1.05)
  `(link :foreground unspecified :underline nil :background ,(nth 1 (nth 7 doom-themes--colors)))
  '(org-link :foreground unspecified))

;; Toggle completed entries function
(defun org-agenda-toggle-completed ()
  (interactive)
  (setq org-agenda-skip-timestamp-if-done (not org-agenda-skip-timestamp-if-done)
        org-agenda-skip-deadline-if-done (not org-agenda-skip-timestamp-if-done)
        org-agenda-skip-scheduled-if-done (not org-agenda-skip-timestamp-if-done))
  (org-agenda-redo))

(map!
  :map evil-org-agenda-mode-map
  :after org-agenda
  :nvmeg "s d" #'org-agenda-toggle-completed)

;; Ricing org agenda
(setq org-agenda-current-time-string "")
(setq org-agenda-time-grid '((daily) () "" ""))

(setq org-agenda-prefix-format '(
(agenda . "  %?-2i %t ")
 (todo . " %i %-12:c")
 (tags . " %i %-12:c")
 (search . " %i %-12:c")))

(setq org-agenda-hide-tags-regexp ".*")

(setq org-agenda-category-icon-alist
      `(("Teaching.p" ,(list (all-the-icons-faicon "graduation-cap" :height 0.8)) nil nil :ascent center)
        ("Family.s" ,(list (all-the-icons-faicon "home" :v-adjust 0.005)) nil nil :ascent center)
        ("Producer.p" ,(list (all-the-icons-faicon "youtube-play" :height 0.9)) nil nil :ascent center)
        ("Bard.p" ,(list (all-the-icons-faicon "music" :height 0.9)) nil nil :ascent center)
        ("Stories.s" ,(list (all-the-icons-faicon "book" :height 0.9)) nil nil :ascent center)
        ("Author.p" ,(list (all-the-icons-faicon "pencil" :height 0.9)) nil nil :ascent center)
        ("Gamedev.s" ,(list (all-the-icons-faicon "gamepad" :height 0.9)) nil nil :ascent center)
        ("Knowledge.p" ,(list (all-the-icons-faicon "database" :height 0.8)) nil nil :ascent center)
        ("Personal.p" ,(list (all-the-icons-material "person" :height 0.9)) nil nil :ascent center)
))
(defalias 'org-timestamp-down 'org-timestamp-down-day)
(defalias 'org-timestamp-up 'org-timestamp-up-day)

(defun org-categorize-by-roam-db-on-save ()
  (interactive)
  (when (string= (message "%s" major-mode) "org-mode")
    (when
      (string-prefix-p (concat "/home/" user-username "/Org") (expand-file-name (buffer-file-name)))
      (setq categorizer-old-line (line-number-at-pos))
      (evil-goto-first-line)
      (org-set-property "CATEGORY" (substring (string-trim-left (expand-file-name (buffer-file-name)) (concat "/home/" user-username "/Org/")) 0 (string-match "/" (string-trim-left (expand-file-name (buffer-file-name)) (concat "/home/" user-username "/Org/")))))
      (evil-goto-line categorizer-old-line)
    )
  )
)

(add-hook 'after-save-hook 'org-categorize-by-roam-db-on-save)

;; Function to be run when org-agenda is opened
(defun org-agenda-open-hook ()
  "Hook to be run when org-agenda is opened"
  (olivetti-mode))

;; Adds hook to org agenda mode, making follow mode active in org agenda
(add-hook 'org-agenda-mode-hook 'org-agenda-open-hook)

;; Easy refreshes on org agenda for syncthing file changes
;; adapted from https://www.reddit.com/r/orgmode/comments/mu6n5b/org_agenda_auto_updating/
;; and https://lists.gnu.org/archive/html/help-gnu-emacs/2008-12/msg00435.html
(defadvice org-agenda-list (before refresh-org-agenda-on-revert activate)
  (mapc (lambda (file)
          (unless (verify-visited-file-modtime (get-file-buffer file))
          (with-current-buffer (get-file-buffer file)
            (when (eq major-mode 'org-mode)
              (revert-buffer nil 'noconfirm)))))
        (org-agenda-files)))

(defadvice org-agenda-redo (before refresh-org-agenda-on-revert activate)
  (mapc (lambda (file)
          (unless (verify-visited-file-modtime (get-file-buffer file))
          (with-current-buffer (get-file-buffer file)
            (when (eq major-mode 'org-mode)
              (revert-buffer nil 'noconfirm)))))
        (org-agenda-files)))
(defadvice org-agenda-redo-all (before refresh-org-agenda-on-revert activate)
  (mapc (lambda (file)
          (unless (verify-visited-file-modtime (get-file-buffer file))
          (with-current-buffer (get-file-buffer file)
            (when (eq major-mode 'org-mode)
              (revert-buffer nil 'noconfirm)))))
        (org-agenda-files)))

;; Function to list all my available org agenda files and switch to them
(defun list-and-switch-to-agenda-file ()
  "Lists all available agenda files and switches to desired one"
  (interactive)
  (setq full-agenda-file-list nil)
  (setq choice (completing-read "Select agenda file:" org-agenda-files nil t))
  (find-file choice))

(map! :leader
      :desc "Switch to specific org agenda file"
      "o a s" 'list-and-switch-to-agenda-file)

(defun org-agenda-switch-with-roam ()
  "Switches to org roam node file and database from org agenda view"
  (interactive)
  (org-agenda-switch-to)
  (if (f-exists-p (concat (dir!) "/org-roam.db"))
    (org-roam-switch-db (replace-regexp-in-string (concat "\\/home\\/" user-username "\\/Org\\/") "" (f-parent (dir!))) t))
  (if (f-exists-p (concat (f-parent (dir!)) "/org-roam.db"))
    (org-roam-switch-db (replace-regexp-in-string (concat "\\/home\\/" user-username "\\/Org\\/") "" (f-parent (f-parent (dir!)))) t))
  (org-roam-olivetti-mode)
)

(map!
  :map evil-org-agenda-mode-map
  :after org-agenda
  :nvmeg "<RET>" #'org-agenda-switch-with-roam
  :nvmeg "<return>" #'org-agenda-switch-with-roam)
(map!
  :map org-agenda-mode-map
  :after org-agenda
  :nvmeg "<RET>" #'org-agenda-switch-with-roam
  :nvmeg "<return>" #'org-agenda-switch-with-roam)

(setq org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
         (:name " Overdue "  ; Optionally specify section name
                :scheduled past
                :order 2
                :face 'error)

         (:name "Personal "
                :and(:file-path "Personal.p" :not (:tag "event"))
                :order 3)

         (:name "Family "
                :and(:file-path "Family.s" :not (:tag "event"))
                :order 3)

         (:name "Teaching "
                :and(:file-path "Teaching.p" :not (:tag "event"))
                :order 3)

         (:name "Gamedev "
                :and(:file-path "Gamedev.s" :not (:tag "event"))
                :order 3)

         (:name "Youtube "
                :and(:file-path "Producer.p" :not (:tag "event"))
                :order 3)

         (:name "Music "
                :and(:file-path "Bard.p" :not (:tag "event"))
                :order 3)

         (:name "Storywriting "
                :and(:file-path "Stories.s" :not (:tag "event"))
                :order 3)

         (:name "Writing "
                :and(:file-path "Author.p" :not (:tag "event"))
                :order 3)

         (:name "Learning "
                :and(:file-path "Knowledge.p" :not (:tag "event"))
                :order 3)

          (:name " Today "  ; Optionally specify section name
                :time-grid t
                :date today
                :scheduled today
                :order 1
                :face 'warning)

))


(map! :desc "Next line"
      :map org-super-agenda-header-map
      "j" 'org-agenda-next-line)

(map! :desc "Next line"
      :map org-super-agenda-header-map
      "k" 'org-agenda-previous-line)

#+end_src

** Org Roam
#+begin_src emacs-lisp :tangle config.el

(setq org-roam-directory "~/Documents/org/roam")

(setq org-roam-node-display-template
      "${title:65}📝${tags:*}")

(setq org-roam-list-files-commands '(rg find)) ;; command for search org-roam files
(use-package! consult-org-roam
   :ensure t
   :after org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))
#+end_src

** Git
*** Magit
#+begin_src emacs-lisp :tangle config.el
#+end_src
*** Git Timemachine
#+begin_src emacs-lisp :tangle configl.el
#+end_src

** Dired
#+begin_src emacs-lisp :tangle config.el

(use-package! nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))

;;(add-hook! 'dired-mode-hook #'all-the-icons-dired-mode)

#+end_src

** Complition
#+begin_src emacs-lisp :tangle config.el

(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

#+end_src

** Ibuffer
#+begin_src emacs-lisp :tangle config.el
(use-package! nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(setq ibuffer-saved-filter-groups
      '(("default"
         ("Programming"   (predicate . (derived-mode-p 'prog-mode)))
         ("Org"           (mode . org-mode))
         ("Dired"         (mode . dired-mode))
         ("Magit"         (name . "^magit")))))

;; Exclude some buffers
(setq ibuffer-never-show-predicates
      '(;; System buffers
        "^\\*Messages\\*$"
        "^\\*scratch\\*$"
        "^\\*Completions\\*$"
        "^\\*Help\\*$"
        "^\\*Apropos\\*$"
        "^\\*info\\*$"
        "^\\*Async-native-compile-log\\*$"
        "^\\*Native-compile-log\\*$"

        ;; LSP Buffers
        "^\\*lsp-log\\*$"
        "^\\*clojure-lsp\\*$"
        "^\\*clojure-lsp::stderr\\*$"
        "^\\*ts-ls\\*$"
        "^\\*ts-ls::stderr\\*$"))

(setq ibuffer-formats
      '((mark " " (name 60 -1 :left))))

#+end_src

** awqat
#+begin_src emacs-lisp :tangle config.el

(use-package! awqat
  :commands (awqat-display-prayer-time-mode
             awqat-times-for-day)
  :config
  (setq calendar-latitude 32.377533
        calendar-longitude 15.092017
        awqat-mode-line-format " ${prayer} (${hours}h${minutes}m) "
        awqat-prayer-safety-offsets '(1.0 -1.0 4.0 0.0 4.0 1.0))
  (awqat-set-preset-umm-al-qura))

#+end_src

** Olivetti
#+begin_src emacs-lisp :tangle config.el
(use-package! olivetti
  :defer t
  :config
  (setq olivetti-style t))

(map! :leader
      :prefix "t"
      :desc "Toggle center content" "O" #'olivetti-mode)
#+end_src

** Emms
Emacs MultiMedia System

#+begin_src emacs-lisp :tangle config.el

(use-package! emms
  :bind
  (("<AudioPlay>" . emms-start)
   ("<AudioPause>" . emms-pause)))

#+end_src

** Typst

#+begin_src emacs-lisp :tangle config.el

(use-package! typst-ts-mode
  :custom
  (typst-ts-watch-options "--open")
  (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.so" user-emacs-directory))
  (typst-ts-mode-enable-raw-blocks-highlight t)
  :config
  (keymap-set typst-ts-mode-map "C-c C-c" #'typst-ts-tmenu))

#+end_src

** OpenWith

#+begin_src emacs-lisp :tangle config.el

;;(setq image-regexp (openwith-make-extension-regexp '("png" "jpeg" "jpg" "svg")))
;;(use-package! openwith
;;  :config
;;  (setq openwith-associations
;;        '(list (image-regexp "sxiv" '(file))))
;;
;;  (openwith-mode))

#+end_src

* My package.el
This file contains the declare of all package that we want to install

To install package use the doom macro =package!=
=ex=: (package! org-modren)

=NOTE=: after you edit this file make sure you run =doom sync= or =SPC h r r=

For more info for packaging in doom read =Package management= in doom doc

#+begin_src emacs-lisp :tangle packages.el
;; Org
(package! org-pomodoro)
(package! org-modern)
(package! org-auto-tangle)
(package! org-super-agenda)
(package! consult-org-roam)
(package! svg-tag-mode)

;; Icons
(package! nerd-icons)
(package! nerd-icons-dired)
(package! nerd-icons-completion)
(package! nerd-icons-ibuffer)
(package! all-the-icons)

;; UI
(package! rainbow-delimiters)
(package! olivetti)
(package! imenu-list)
(package! focus)

;; light theme
(package! south-theme
  :recipe (:host github
           :repo "SophieBosio/south"))


(package! awqat
  :recipe (:host github
           :repo "zkry/awqat"))

;; Typst
(package! typst-ts-mode
  :recipe (:host nil
           :repo "https://git.sr.ht/~meow_king/typst-ts-mode"))

(package! gt)
(package! ssh-agency)
(package! bluetooth)
(package! openwith)
#+end_src

* My init.el
this section for init.el file, this file contains emacs module which loader when emacs run.

To disable the module comment it with ;; in the begin of the line

To get info about the module press =SPC h d h= or move the cursor to the module and press =K=

=NOTE=: after you edit this file make sure you run =doom sync= or =SPC h r r=

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       ;;company           ; the ultimate code completion backend
       (corfu +orderless +icons)  ; complete with cap(f), cape and a flying feather!
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash        ; blink cursor line after big motions
       ;;neotree          ; a project drawer, like NERDTree for vim
       ophints            ; highlight the region an operation acts on
       (popup +defaults)  ; tame sudden yet inevitable temporary windows
       ;;smooth-scroll    ; So smooth you won't believe it's not butter
       ;;tabs             ; a tab bar for Emacs
       treemacs           ; a project drawer, like neotree but cooler
       unicode            ; extended unicode support for various languages
       (vc-gutter +pretty); vcs diff in the fringe
       ;;vi-tilde-fringe  ; fringe tildes to mark beyond EOB
       ;;window-select    ; visually switch windows
       workspaces         ; tab emulation, persistence & separate workspaces
       ;;zen              ; distraction-free coding or writing

       :editor
       (evil +everywhere) ; come to the dark side, we have cookies
       file-templates     ; auto-snippets for empty files
       fold               ; (nigh) universal code folding
       (format +onsave)   ; automated prettiness
       ;;god              ; run Emacs commands without modifier keys
       ;;lispy            ; vim for lisp, for people who don't like vim
       multiple-cursors   ; editing in many places at once
       ;;objed            ; text object editing for the innocent
       ;;parinfer         ; turn lisp into python, sort of
       rotate-text      ; cycle region at point between text candidates
       snippets           ; my elves. They type so I don't have to
       ;;word-wrap        ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       eww               ; the internet is gross
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)           ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp)   ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam2)        ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       graphviz          ; diagrams for confusing yourself even more
       ;;purescript        ; javascript, but functional
       (python +lsp )      ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       (scheme +guile)   ; a fully conniving family of lisps
       (sh +lsp)           ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web)          ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader

       :config
       ;;literate
       (default +bindings +smartparens))

#+end_src
